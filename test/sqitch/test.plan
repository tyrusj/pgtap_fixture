%syntax-version=1.0.0
%project=pgtap_fixture_tests
%uri=https://github.com/tyrusj/pgtap_fixture/tests

initialize/create-testing-schema 2025-04-14T15:39:43Z Josh Taylor <josh@tyrusaudio.com> # Create schema where the unit testing extensions content should be stored.
initialize/create-testing-extension 2025-04-14T15:25:43Z Josh Taylor <josh@tyrusaudio.com> # Load the pg_tap extension.
initialize/create-unit-test-schema 2025-04-15T16:17:11Z Josh Taylor <josh@tyrusaudio.com> # Create a schema where unit tests will be stored.
initialize/set-search-path 2025-04-26T23:37:08Z Josh Taylor <josh@tyrusaudio.com> # Set the search path, so that unit test functions in the tap schema can be referenced.
test/tables/fixture/insert-unique-name-and-parent 2025-04-20T23:01:30Z Josh Taylor <josh@tyrusaudio.com> # Create unit test: If a record is added to the fixture table, and if that records name and parent fixture ID are the same as an existing records parent and fixture ID, then the database shall throw an exception.
test/tables/fixture/update-unique-name-and-parent 2025-04-20T23:09:12Z Josh Taylor <josh@tyrusaudio.com> # Unit test: If a record is modified in the fixture table, and if that record's name and parent fixture ID are the same as an existing record's parent and fixture ID, then the database shall throw an exception.
test/tables/fixture/insert-name-has-no-slashes 2025-04-21T15:02:16Z Josh Taylor <josh@tyrusaudio.com> # Unit test: If a record is added to the fixture table, and if that record's name is invalid, then the database shall throw an exception.
test/tables/fixture/update-name-has-no-slashes 2025-04-21T16:01:47Z Josh Taylor <josh@tyrusaudio.com> # Unit test: If a record is modified in the fixture table, and if that record's name contains slash characters, then the database shall throw an exception.
test/tables/test/insert-unique-schema-and-function 2025-04-21T21:17:42Z Josh Taylor <josh@tyrusaudio.com> # Unit test: If a record is added to the test table, and if that record's schema and function match an existing record's schema and function, then the database shall throw an exception.
test/tables/test/update-unique-schema-and-function 2025-04-21T21:40:36Z Josh Taylor <josh@tyrusaudio.com> # Unit test: If record is modified in the test table, and if that record's schema and function match an existing record's schema and function, then the database shall throw an exception.
test/tables/test_data/insert-unique-test-id-role-and-parameters 2025-04-21T23:17:42Z Josh Taylor <josh@tyrusaudio.com> # Unit test: If a record is added to the test data table, and if a record exists that contains the same test ID, role, and parameters, then the database shall throw an exception.
test/tables/test_data/update-unique-test-id-role-and-parameters 2025-04-22T17:24:32Z Josh Taylor <josh@tyrusaudio.com> # Add unit test: If a record is modified in the test data table, and if a record exists that contains the same test ID, role, and parameters, then the database shall throw an exception.
test/tables/fixture/insert-name-not-zero-length 2025-04-23T16:48:15Z Josh Taylor <josh@tyrusaudio.com> # Unit test: If a record is added to the fixture table, and if that record's name's length is zero characters, then the database shall throw an exception.
test/tables/fixture/update-name-not-zero-length 2025-04-23T16:58:09Z Josh Taylor <josh@tyrusaudio.com> # Unit test: If a record is modified in the fixture table, and if that record's name's length is zero characters, then the database shall throw an exception.
test/functions/_plan_parent_fixtures/fixture-must-exist 2025-04-23T18:26:28Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When planning parent fixtures, if the given fixture does not exist, then the database shall throw an exception.
test/functions/_plan_parent_fixtures/include-parent-fixture 2025-04-23T19:03:39Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When planning parent fixtures, if the given fixture has a parent fixture, and if that parent fixture is not in the plan, then include that fixture in the plan.
test/functions/_plan_parent_fixtures/recursively-plan-parent-fixtures 2025-04-23T21:40:30Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When planning fixtures, if the given fixture has a parent fixture, then the function shall recursively include parent fixtures and parent parent fixtures in the plan.
test/functions/_plan_child_tests_and_fixtures/fixture-must-exist 2025-04-24T15:58:52Z Josh Taylor <josh@tyrusaudio.com> # Add unit test: When planning child tests and fixtures, if the given fixture does not exist, then the database shall throw an exception.
test/functions/_plan_child_tests_and_fixtures/plan-tests 2025-04-24T16:24:58Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When planning child tests and fixtures, for the given fixture, for each test whose parent fixture is that fixture, if that test is not in the plan, then the function shall include that test in the plan.
test/functions/_plan_child_tests_and_fixtures/plan-fixtures 2025-04-24T19:04:49Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When planning child tests and fixtures, for the given fixture, for each (child) fixture whose parent fixture is that fixture, the function shall include that (child) fixture in the plan.
test/functions/_plan_child_tests_and_fixtures/recursively-plan-tests-and-fixtures 2025-04-24T19:33:14Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When planning child tests and fixtures, for the given fixture, for each (child) fixture whose parent fixture is that fixture, the function shall include child tests and fixtures of that fixture in the plan.
test/functions/_plan_tests_and_fixtures/tests-must-exist 2025-04-25T22:47:13Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When planning tests and fixtures, for each given test, if that test does not exist, then the function shall throw an exception.
test/functions/_plan_tests_and_fixtures/fixtures-must-exist 2025-04-26T17:47:50Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When planning tests and fixtures, for each given fixture, if that fixture does not exist, then the function shall throw an exception.
test/functions/_plan_tests_and_fixtures/include-tests 2025-04-26T19:05:05Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When planning tests and fixtures, for each given test, if that test is not in the plan, then the function shall include that test in the plan.
test/functions/_plan_tests_and_fixtures/include-fixtures 2025-04-27T01:22:16Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When planning tests and fixtures, for each given fixture, if that fixture is not in the plan, then the function shall include that fixture in the plan.
test/functions/_plan_tests_and_fixtures/include-test-parents 2025-04-28T15:37:24Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When planning tests and fixtures, for each given test, if that test has a parent fixture, and if that parent fixture is not in the plan, then the function shall include that fixture in the plan.
test/functions/_plan_tests_and_fixtures/include-test-parents-recursively 2025-04-28T16:46:52Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When planning tests and fixtures, for each given test, if that test has a parent fixture, then the function shall recursively plan parent fixtures of that fixture.
test/functions/_plan_tests_and_fixtures/include-fixtures-recursively 2025-04-28T17:36:41Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When planning tests and fixtures, for each given fixture, if that fixture has a parent fixture, then the function shall recursively plan parent fixtures of that fixture.
test/functions/_plan_tests_and_fixtures/include-children-recursively 2025-04-28T18:25:29Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When planning tests and fixtures, for each given fixture, the function shall include child tests and fixtures of that fixture in the plan.
test/functions/_execute_test/test-must-exist 2025-04-30T00:00:28Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test does not exist, then the function shall throw an exception.
test/functions/_execute_test/execute-with-parameters 2025-04-30T15:33:19Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, for each record in the test data table that corresponds with the given test, the database shall execute the given function with the result of executing the test data record's parameters statement.
test/functions/_execute_test/rollback-on-exception 2025-04-30T21:47:53Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if a test modified the database, and if the test throws an exception, then the database shall rollback those modifications.
test/functions/_execute_test/rollback-changes 2025-05-01T22:54:26Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, for each record in the test data table that corresponds with the given test, the function shall rollback changes made by the fixture setup, the test, and the fixture teardown.
test/functions/_execute_test/rollback-on-setup-exception 2025-05-01T23:05:43Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, for each record in the test data table that corresponds with the given test, if the test's parent fixture's setup statement throws an exception, then the database shall rollback changes made by the setup statement.
test/functions/_execute_test/rollback-on-teardown-exception 2025-05-01T23:15:21Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, for each record in the test data table that corresponds with the given test, if the test's parent fixture's teardown statement throws an exception, then the database shall rollback changes made by the fixture setup, the test, and the fixture teardown.
test/functions/_execute_test/set-test-description 2025-05-01T23:33:44Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, for each record in the test data table that corresponds with the given test, the function shall execute the test with a test description value that is a combination of the test record's description, the test data record's description, and the result of the test data's parameters statement.
test/functions/_execute_test/return-results 2025-05-02T14:05:16Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, for each record in the test data table that corresponds with the given test, the function shall return the test results of the test executed with that data.
test/functions/_execute_test/setup-before-test 2025-05-02T15:12:47Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, for each record in the test data table that corresponds with the given test, if the test has a parent fixture, and if that fixture has a setup statement, then the function shall execute that setup statement before executing the test with data.
test/functions/_execute_test/teardown-after-test 2025-05-02T16:18:55Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, for each record in the test data table that corresponds with the given test, if the test has a parent fixture, and if that fixture has a teardown statement, then the function shall execute that teardown statement after executing the test.
test/functions/_execute_test/execute-with-no-arguments 2025-05-02T16:34:00Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if a test function has no arguments, then the database shall execute the test function once regardless of whether there are test data records associated with it.
test/functions/_execute_test/execute-with-temp-schema 2025-05-05T18:22:18Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if that test's schema is pg_temp, then the function shall execute that function using the schema for which pg_temp is an alias.
test/functions/_execute_fixture/fixture-must-exist 2025-05-07T15:59:46Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the given fixture does not exist, then the function shall throw an exception.
test/functions/_execute_fixture/setup-before 2025-05-07T16:14:24Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the fixture has a parent fixture, and if that fixture has a non-null setup statement, then the function shall execute that setup statement before executing the fixture.
test/functions/_execute_fixture/teardown-after 2025-05-07T16:43:39Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the fixture has a parent fixture, and if that fixture has a non-null teardown statement, then the function shall execute that teardown statement after executing the fixture.
test/functions/_execute_fixture/startup-before 2025-05-07T16:52:53Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the fixture has a non-null startup statement, then the function shall execute the startup statement before executing the first child test or child fixture.
test/functions/_execute_fixture/shutdown-after 2025-05-07T17:31:47Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the fixture has a non-null shutdown statement, then the function shall execute the shutdown statement after executing the last child test or child fixture.
test/functions/_execute_fixture/execute-tests 2025-05-07T18:33:27Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, for each record in the test table whose parent fixture is the given fixture, if that test is in the plan, then the database shall execute that test with all of its test data.
test/functions/_execute_fixture/execute-fixtures 2025-05-07T18:55:22Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, for each record in the fixture table whose parent fixture is the given fixture, if that fixture is in the plan, then the database shall execute that fixture.
test/functions/_execute_fixture/rollback-changes 2025-05-07T19:05:56Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, after executing a fixture, the function shall rollback changes made by the parent fixture setup, the fixture startup, the child tests, the child fixtures, the fixture shutdown, and the parent fixture teardown.
test/functions/_is_fixture_path_valid/no-adjacent-slashes 2025-05-08T15:07:34Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When validating a fixture path, if the given fixture path contains two slash characters that are adjacent to one another, then the function shall return false.
test/functions/_is_fixture_path_valid/no-beginning-slash 2025-05-08T15:30:47Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When validating a fixture path, if the given fixture path begins with a slash character, then the function shall return false.
test/functions/_is_fixture_path_valid/no-ending-slash 2025-05-08T15:37:48Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When validating a fixture path, if the given fixture path ends with a slash character, then the function shall return false.
test/functions/_get_fixture_by_path_and_root/path-must-be-valid 2025-05-08T17:20:27Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When getting a fixture by path and root, if the given fixture path is not valid, then the function shall throw an exception.
test/functions/_get_fixture_by_path_and_root/root-fixture-must-exist 2025-05-08T17:44:33Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When getting a fixture by path and root, if there is no record in the fixture table whose name corresponds with the first name in the given fixture path and whose parent fixture ID corresponds with the given root fixture ID (null parent fixture ID and null root fixture ID count as equal), then the function shall throw an exception.
test/functions/_get_fixture_by_path_and_root/return-fixture-id 2025-05-08T21:02:03Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When getting a fixture by path and root, if there is a record in the fixture table whose name corresponds with the first name in the given fixture path and whose parent fixture ID corresponds with the given root fixture ID (null parent fixture ID and null root fixture ID count as equal), and if there are no names after the first name in the given fixture path, then the function shall return the ID of the fixture record.
test/functions/_get_fixture_by_path_and_root/return-fixture-id-recursive 2025-05-08T21:25:33Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When getting a fixture by path and root, if there is a record in the fixture table whose name corresponds with the first name in the given fixture path and whose parent fixture ID corresponds with the given root fixture ID (null parent fixture ID and null root fixture ID count as equal), and if there are more names after the first in the given fixture path, then the function shall return the ID of the fixture whose path is the given path excluding the first name and whose root fixture ID is the fixture ID that corresponds with the given path and fixture ID.
test/functions/execute_tests/delete-test-plan 2025-05-09T17:52:38Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, if a test plan already exists, then the function shall delete that test plan.
test/functions/execute_tests/delete-fixture-plan 2025-05-09T18:03:38Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, if a fixture plan already exists, then the function shall delete that fixture plan.
test/functions/execute_tests/plan-all-fixtures 2025-05-09T19:00:23Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, if no fixtures or tests are given, then for each record in the fixture table that does not have a parent fixture ID, the function shall plan that fixture.
test/functions/execute_tests/plan-all-tests 2025-05-09T19:21:38Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, if no fixtures or tests are given, then for each record in the test table that does not have a parent fixture ID, the function shall plan that test.
test/functions/execute_tests/plan-given-tests 2025-05-12T16:19:42Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, if one or more tests are given, then for each given test, the function shall plan that test.
test/functions/execute_tests/plan-given-fixtures 2025-05-12T16:34:12Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, if one or more fixtures are given, for each given fixture, the function shall plan that fixture.
test/functions/execute_tests/execute-root-tests 2025-05-12T16:51:29Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, for each test in the plan that does not have a parent fixture, the function shall execute that test with its test data.
test/functions/execute_tests/execute-root-fixtures 2025-05-12T17:06:33Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, for each fixture in the plan that does not have a parent fixture, the function shall execute that fixture with its tests and fixtures.
test/functions/_execute_test/teardown-on-exception 2025-05-13T15:55:05Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if that test throws an exception, then the function shall execute that test's parent fixture's teardown statement.
test/functions/_execute_fixture/teardown-on-startup-exception 2025-05-13T16:54:06Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the fixture startup, a child test, a child fixture, or the fixture shutdown throws an exception, then the function shall execute the parent fixture's teardown statement.
test/functions/_execute_fixture/teardown-on-shutdown-exception 2025-05-13T17:09:51Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the fixture shutdown throws an exception, then the function shall execute the parent fixture's teardown statement.
test/functions/_execute_fixture/teardown-on-test-exception 2025-05-13T17:14:43Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if a child test throws an exception, then the function shall execute the parent fixture's teardown statement.
test/functions/_execute_fixture/teardown-on-fixture-exception 2025-05-13T17:28:07Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if a child fixture throws an exception, then the function shall execute the parent fixture's teardown statement.
test/functions/_execute_fixture/shutdown-on-test-exception 2025-05-13T17:35:10Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if a child test throws an exception, then the function shall execute the fixture's shutdown statement.
test/functions/_execute_fixture/shutdown-on-fixture-exception 2025-05-13T17:40:27Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if a child fixture throws an exception, then the function shall execute the fixture's shutdown statement.
test/functions/_get_fixture_by_path_and_root/create-missing-fixtures 2025-05-13T22:40:45Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When getting a fixture by path and root, if there is no record in the fixture table whose name corresponds with the first name in the given fixture path and whose parent fixture ID corresponds with the given root fixture ID (null parent fixture ID and null root fixture ID count as equal), and if the function has been instructed to create missing fixtures, then the function shall create a fixture having the first name in the given fixture path with the root fixture ID as its parent and return the ID of the newly created fixture.
test/functions/add_test/no-duplicate-tests 2025-05-14T16:05:52Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When adding a test, if a record already exists in the test table whose test ID corresponds with the given schema and function, then the database shall throw an exception.
test/functions/add_test/non-null-schema-and-function 2025-05-14T16:23:33Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When adding a test, if the given schema or function is null, then the function shall throw an exception.
test/functions/add_test/null-fixture 2025-05-14T16:31:00Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When adding a test, if the given fixture path is null, then the function shall set the fixture ID of the added test record to null.
test/functions/add_test/add-record 2025-05-14T16:39:49Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When adding a test, the function shall add a record to the test table with the given schema, function, and description.
test/functions/add_test/ensure-fixture-exists 2025-05-14T16:52:58Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When adding a test, if the given fixture path is not null, then the function shall ensure that the fixture that corresponds with the given fixture path exists.
test/functions/_remove_unused_fixtures/remove-given-fixture 2025-05-14T19:20:11Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When removing unused fixtures, if there are no test records whose parent fixture ID corresponds with the given fixture ID, and if there are no fixture records whose parent fixture ID corresponds with the given fixture ID, and if the fixture record that corresponds with the given fixture ID is unconfigured, then the function shall remove the record from the fixture table with that fixture ID.
test/functions/_remove_unused_fixtures/remove-parent-fixture 2025-05-14T19:45:36Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When removing unused fixtures, if a fixture record is removed from the fixture table, and if that record had a parent fixture ID, then the function shall remove unused fixture records associated with that fixture ID.
test/functions/remove_test/remove-record 2025-05-15T15:13:50Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When removing a test, the function shall remove the record from the test table with the given schema and function.
test/functions/remove_test/remove-unused-fixtures 2025-05-15T15:23:24Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When removing a test, if the test has a parent fixture ID, then the function shall remove unused fixtures associated with that fixture ID.
test/functions/configure_fixture/null-fixture 2025-05-15T16:07:04Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When configuring a fixture, if the fixture path is null, then the function shall throw an exception.
test/functions/configure_fixture/invalid-fixture 2025-05-15T16:17:40Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When configuring a fixture, if the fixture path is invalid, then the function shall throw an exception.
test/functions/configure_fixture/ensure-fixture-exists 2025-05-15T16:21:00Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When configuring a fixture, if the fixture path is not null, then the function shall ensure that a fixture exists for the given fixture path.
test/functions/configure_fixture/set-record-values 2025-05-15T16:37:51Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When configuring a fixture, set the description, startup, shutdown, setup, and teardown on the fixture record that corresponds with the given fixture path.
test/functions/unconfigure_fixture/set-record-nulls 2025-05-15T18:19:23Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When unconfiguring a fixture, if a fixture record corresponds with the given fixture path, then the function shall set the following values to null: description, startup, shutdown, setup, teardown.
test/functions/unconfigure_fixture/remove-unused-fixtures 2025-05-15T18:29:23Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When unconfiguring a fixture, if that fixture becomes unused after unconfiguring, then the function shall remove unused fixtures beginning with the given fixture.
test/functions/add_test_data/test-must-exist 2025-05-15T21:27:47Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When adding test data, if no test corresponds with the given schema and function, then the database shall throw an exception.
test/functions/add_test_data/create-record 2025-05-15T21:35:33Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When adding test data, the function shall create a test data record with the given parameters and a test ID that corresponds with a test record having the given schema and function.
test/functions/remove_test_data/remove-record 2025-05-15T21:55:34Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When removing test data, the function shall remove the test data record that contains the given parameters and whose test ID corresponds with a test record having the given schema and function.
test/functions/remove_all_test_data/remove-records 2025-05-15T22:38:59Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When removing all test data, the function shall remove all test data records whose test ID corresponds with a test record having the given schema and function.
test/functions/remove_test/remove-data 2025-05-15T23:06:48Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When removing a test, if the test has associated test data, then the function shall remove those test data.
test/functions/_escape_special_characters/escape-backslashes 2025-05-22T17:25:20Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When escaping special characters, the function shall replace each '\\' character in the given string with '\\\\'.
test/functions/_escape_special_characters/escape-pound 2025-05-22T17:35:26Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When escaping special characters, the function shall replace each '#' character in the given string with '\\#'.
test/functions/_comment_lines/add-comment 2025-05-22T17:53:30Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When commenting a line, the function shall insert '# ' at the beginning of the line.
test/functions/_indent_lines/indent-lines 2025-05-22T22:12:12Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When indenting lines, for each line in the given string, the function shall insert a number of spaces at the beginning of the line equal to 4 times the given degree.
test/functions/_format_result/content-order 2025-05-22T22:45:56Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When formatting a result, the function shall return a string containing the following in the following order: status, number, ' - ', name, description.
test/functions/_format_result/ok-status 2025-05-22T22:55:26Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When formatting a result, if the status is true, then the result string shall contain 'ok', otherwise the result string shall contain 'not ok'.
test/functions/_format_result/escape-special-characters 2025-05-22T23:01:32Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When formatting a result, the function shall escape special characters in the name and description.
test/functions/_format_result/comment-lines 2025-05-22T23:05:21Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When formatting a result, the function shall comment each line in the return value after the first.
test/functions/_format_subtest/content-order 2025-05-23T16:42:05Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When formatting a subtest, the function shall return a string containing the following in the following order: '# Subtest: ', name, description.
test/functions/_format_subtest/escape-special-characters 2025-05-23T16:47:13Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When formatting a subtest, the function shall escape special characters in the name and description.
test/functions/_format_subtest/comment-lines 2025-05-23T16:50:21Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When formatting a subtest, the function shall comment each line in the return value after the first.
test/functions/_format_plan/content-order-with-comment 2025-05-23T17:04:19Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When formatting a plan, if the reason is not null, then, the function shall return a string containing the following in the following order: '1..', number, ' # ', reason.
test/functions/_format_plan/content-order-with-no-comment 2025-05-23T17:10:37Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When formatting a plan, if the reason is null, then the function shall return a string containing the following in the following order: '1..', number.
test/functions/_format_plan/escape-special-characters 2025-05-23T17:14:31Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When formatting a plan, the function shall escape special characters in the reason.
test/functions/_format_plan/comment-lines 2025-05-23T17:18:11Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When formatting a plan, the function shall comment each line in the return value after the first.
test/functions/_format_skip/content-order 2025-05-23T18:25:32Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When formatting a skipped test, the function shall return a string containing the following in the following order: status, number, '# skip ', reason, name, description.
test/functions/_format_skip/escape-special-characters 2025-05-23T18:51:05Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When formatting a skipped test, the function shall escape special characters in the reason, name, and description.
test/functions/_format_skip/extra-reason-lines 2025-05-23T18:57:13Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When formatting a skipped test, if the reason has two or more lines of text, then the function shall return the first line of the reason in the first line of the result and the remaining lines as comments, where the first comment line contains "Reason cont'd".
test/functions/_format_skip/extra-name-description-lines 2025-05-23T19:06:21Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When formatting a skipped test, if the name or description has two or more lines of text, then the function shall return the first line of the name and description text in the first line of the result and the remaining lines as comments, where the first comment line contains "Name and description cont'd".
test/functions/_execute_fixture/skip-empty 2025-05-26T15:53:11Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the fixture contains no tests or child fixtures, then the function shall return a formatted skipped test, where the name is the fixture path, the description is the fixture description, the reason is 'Fixture is empty.', and the status is 'ok'.
test/functions/_get_fixture_path/return-path 2025-05-26T16:26:13Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When getting a fixture path, the function shall return a slash delimited string where the last value is the name of the given fixture, and each previous value is the name of the parent fixture of the value that follows it.
test/functions/_get_fixture_path/fixture-does-not-exist 2025-05-26T16:48:55Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When getting a fixture path, if the given fixture does not exist, then the function shall return null.
test/functions/_execute_fixture/fixture-exception 2025-05-26T17:44:25Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the fixture is not empty, and if the fixture throws an exception, then the function shall return indented commented exception content.
test/functions/_execute_fixture/not-ok-on-exception 2025-05-26T18:33:50Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the fixture is not empty, and if the fixture throws an exception, then function shall set the fixture's status to 'not ok'.
test/functions/_execute_fixture/increment-test-number 2025-05-26T18:43:16Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the fixture is not empty, then for each test and child fixture, the function shall increment the test number beginning at 1.
test/functions/_execute_fixture/return-subtest 2025-05-26T21:31:25Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the fixture is not empty, then the function shall return a formatted subtest, where the subtest name is the fixture path, and the subtest description is the fixture description.
test/functions/_execute_fixture/test-results 2025-05-26T21:46:50Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the fixture contains tests, then the function shall return the results of each test.
test/functions/_execute_fixture/fixture-results 2025-05-26T21:59:53Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the fixture contains child fixtures, then the function shall indent and return the results of each child fixture.
test/functions/_execute_fixture/return-plan 2025-05-27T16:22:31Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the fixture is not empty, then after executing the fixture, the function shall return an indented formatted test plan where the plan number is the number of tests and child fixtures executed in the fixture.
test/functions/_execute_fixture/return-status 2025-05-27T16:49:07Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the fixture is not empty, and if all tests and child fixtures returned a status of 'ok', then the function shall set the subtest's status to 'ok', otherwise the function shall set the subtest's status to 'not ok'.
test/functions/_execute_fixture/return-result 2025-05-27T17:31:34Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a fixture, if the fixture is not empty, then the function shall return a formatted result, where the result name is the fixture path, the result description is the fixture description, and the result status is the fixture status.
test/functions/_execute_test/no-arguments-status 2025-05-28T16:29:36Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function takes arguments, and if no test data are associated with the test, then the function shall set that test's status to ok.
test/functions/_execute_test/no-arguments-skip 2025-05-28T16:40:33Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function takes arguments, and if no test data are associated with the test, then the function shall return a formatted skipped test, where the name is the function schema and name, the description is the test description, and the reason is 'No test data.'.
test/functions/_execute_test/return-subtest 2025-05-28T16:52:55Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function does not take arguments, or if the test function takes arguments and there are test data associated with the test, then the function shall return a formatted subtest, where the subtest name is the schema and function of the test, and the subtest description is the test description.
test/functions/_execute_test/no-arguments-results 2025-05-28T17:09:44Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function does not take arguments, then the function shall return the indented results of the test function.
test/functions/_execute_test/increment-test-number 2025-05-28T17:28:21Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function takes arguments, and if test data are associated with the test, then for each test datum, the function shall increment the test number beginning at 1.
test/functions/_execute_test/test-data-subtest 2025-05-28T17:49:28Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function takes arguments, and if test data are associated with the test, then for each test datum, then function shall return an indented formatted subtest where the subtest name is the schema and function of the test, and the subtest description is the test description.
test/functions/_execute_test/reset-pgtap-counter 2025-05-28T20:24:34Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function takes arguments, and if test data are associated with the test, then for each test datum, the function shall return the results of executing the test with that datum.
test/functions/_execute_test/test-data-results 2025-05-28T21:15:40Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function takes arguments, and if test data are associated with the test, then for each test datum, the function shall return the twice indented results of executing the test with that datum.
test/functions/_execute_test/test-data-exception-content 2025-05-28T21:25:52Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function takes arguments, and if test data are associated with the test, then for each test datum, if the test throws an exception, then the function shall return twice indented commented exception content.
test/functions/_execute_test/test-data-plan 2025-05-28T21:34:32Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function takes arguments, and if test data are associated with the test, then for each test datum, the function shall return a twice indented formatted plan where the plan number is the number of pgtap tests executed in the test function.
test/functions/_execute_test/test-data-status 2025-05-29T15:10:00Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function takes arguments, and if test data are associated with the test, and if all pgtap tests returned a status of 'ok', then the function shall set the test's status to 'ok', otherwise the function shall set the test's status to 'not ok'.
test/functions/_execute_test/test-data-result 2025-05-29T15:52:20Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function takes arguments, and if test data are associated with the test, then for each test datum, the function shall return an intented formatted result, where the result name is the schema and function of the test, and the result description contains the test description, test data description, and test data.
test/functions/_execute_test/return-status 2025-05-29T16:02:41Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function takes arguments, and if test data are associated with the test, and if all executions of the test data returned a status of 'ok', then the function shall set the status of the test to 'ok', otherwise the function shall set the status of the test to 'not ok'.
test/functions/_execute_test/no-arguments-exception-status 2025-05-29T16:22:28Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function does not take arguments, and if the test throws an exception, then the function shall set the subtest's status to 'not ok'.
test/functions/_execute_test/no-arguments-reset-pgtap-counter 2025-05-29T16:39:50Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function does not take arguments, before executing the test, the function shall reset the pgtap test number to 1.
test/functions/_execute_test/no-arguments-pgtap-status 2025-05-29T16:50:16Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function does not take arguments, and if all pgtap tests returned 'ok', then the function shall set the status of the subtest to 'ok', otherwise the function shall set the status of the subtest to 'not ok'.
test/functions/_execute_test/no-arguments-exception-content 2025-05-29T16:58:12Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function does not take arguments, and if the test throws an exception, then the function shall return indented commented exception content.
test/functions/_execute_test/no-arguments-plan 2025-05-29T17:03:46Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function does not take arguments, then after executing the test function, the function shall return an indented formatted test plan where the plan number is the number of pgtap tests executed in the test function.
test/functions/_execute_test/return-plan 2025-05-29T17:08:59Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function does take arguments, and if there are test data associated with the test, then after executing the test function with the test data, the function shall return an indented formatted test plan where the plan number is the number of test data that the test function was executed with.
test/functions/_execute_test/return-result 2025-05-29T17:25:34Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test with data, if the test function does not take arguments, or if the test function takes arguments and there are test data associated with the test, then the function shall return a formatted result, where the result name is the schema and function of the test, and the result description is the test description.
test/functions/_fail_test/return-subtest 2025-06-03T17:25:52Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When failing a test, the function shall return a formatted subtest, where the subtest name is the given qualified function, and the subtest description is the given description.
test/functions/_fail_test/return-message 2025-06-03T17:38:49Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When failing a test, the function shall return the given message that is indented and commented.
test/functions/_fail_test/return-plan 2025-06-03T17:45:41Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When failing a test, the function shall return an indented formatted plan with size 0.
test/functions/_fail_test/return-result 2025-06-03T17:48:12Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When failing a test, the function shall return a formatted result, where the result name is the given qualified function, the result description is the given description, and the result status is 'not ok'.
test/functions/_fail_test/test-status 2025-06-03T17:53:35Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When failing a test, the function shall set the test's status to 'not ok'.
test/functions/_fail_test/exception-on-missing-id 2025-06-03T18:46:37Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When failing a test, if the given test ID does not exist, then the function shall throw an exception.
test/functions/_execute_test/function-does-not-exist 2025-06-03T20:45:20Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test, if the test function does not exist in the database, then the function shall fail the test.
test/functions/_execute_test/multiple-functions 2025-06-03T21:00:19Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test, if multiple functions are found in the database that have the same name as the test function, then the function shall fail the test.
test/functions/_execute_test/wrong-return-type 2025-06-03T21:08:05Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test, if the test function does not return a setof text, then the function shall fail the test.
test/functions/_execute_test/wrong-input-types 2025-06-03T21:18:28Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing a test, if the test function does not take one of the following sets of inputs, then the function shall fail the test: (), (jsonb, text)
test/functions/execute_tests/return-version 2025-06-04T17:41:10Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, the function shall return the line 'TAP version 14' before executing any tests or fixtures.
test/functions/execute_tests/return-plan 2025-06-04T17:48:05Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, after executing tests and fixtures, the function shall return a formatted plan, where the plan number is the number of tests and fixtures that were executed.
test/functions/execute_tests/exception-bail-out 2025-06-04T17:59:43Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, if an exception is thrown, then the function shall return 'Bail Out! Unhandled exception.'.
test/functions/execute_tests/exception-content 2025-06-04T18:17:51Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, if an exception is thrown, then the function shall return commented exception content.
test/functions/execute_tests/test-results 2025-06-04T18:31:57Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, the function shall return the result of executing each test with no parent fixture.
test/functions/execute_tests/fixture-results 2025-06-04T18:42:26Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, the function shall return the result of executing each fixture with no parent fixture.
test/functions/execute_tests/increment-test-number 2025-06-04T18:54:23Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, for each test and fixture with no parent fixture, the function shall increment the test number beginning at 1.
test/functions/execute_tests/missing-function-bail-out 2025-06-05T16:19:26Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, if a given test function is not present in the test table, then the function shall return 'Bail Out! ' followed by a message.
test/functions/execute_tests/missing-fixture-bail-out 2025-06-05T16:39:13Z Josh Taylor <josh@tyrusaudio.com> # Unit test: When executing tests, if a given fixture path is not present in the fixture table, then the function shall return 'Bail Out! ' followed by a message.
